"------------------------------------------------------------------------------
" vim-plug
"------------------------------------------------------------------------------
if !exists('g:vimrc_dir')
    if has('win32')
        let g:vimrc_dir = $USERPROFILE . '\vimfiles'
    else
        let g:vimrc_dir = $HOME . '/.vim'
    end
end

let g:myvimrc = g:vimrc_dir . '/vimrc'


call plug#begin(g:vimrc_dir . '/plugged')


" dependency of vim-session
" Plug 'xolox/vim-misc'
" Plug 'xolox/vim-session'
" let g:session_autoload = 'no'
" let g:session_autosave = 'no'
" let g:session_lock_enabled = 0
" let g:session_persist_font = 0
" let g:session_persist_colors = 0


Plug 'junegunn/vim-easy-align'
Plug 'scrooloose/nerdtree'

Plug 'scrooloose/nerdcommenter'
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

Plug 'mileszs/ack.vim'
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Plug 'jremmen/vim-ripgrep'
Plug 'mhinz/vim-grepper'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'godlygeek/tabular'
" Plug 'felixhummel/setcolors.vim'
Plug 'vim-scripts/ScrollColors'
Plug 'vim-scripts/argtextobj.vim'
" required by vim-protodef
Plug 'derekwyatt/vim-fswitch'
Plug 'derekwyatt/vim-protodef'
" Plug 'gcmt/taboo.vim'
"Plug 'vim-scripts/YankRing.vim'
"Plug 'fholgado/minibufexpl.vim'
Plug 'nfvs/vim-perforce'


Plug 'neomake/neomake'
"usage:
":Neomake! <maker>
let g:neomake_cmake_maker = {
            \ 'exe': 'sh',
            \ 'args': ['-c', 'mkdir cmake-build-debug; cd cmake-build-debug; cmake ..'],
            \ 'errorformat': &errorformat,
            \ }
let g:neomake_make_maker = {
            \ 'exe': 'cmake',
            \ 'args': ['--build', 'cmake-build-debug', '-j', '8'],
            \ 'errorformat': &errorformat,
            \ }
let g:neomake_ninja_maker = {
            \ 'exe': 'ninja',
            \ 'args': ['-C', 'Release'],
            \ 'errorformat': &errorformat,
            \ }
let g:neomake_bc_maker = {
            \ 'cwd': 'App',
            \ 'exe': 'cmd',
            \ 'args': ['/c', 'build.bat'],
            \ 'buffer_output': 0,
            \ }

            " \ 'errorformat': '%f(%l)\ :\ error\ %t%n:\ %m,\ %#%f(%l\\\,%c):\ %m',
"set errorformat+=%f:%l:\ warning:\ %t%n:\ %m    " note: apparently warnings appear in DetailedLog only

let g:neomake_msbuild_maker = {
            \ 'cwd': 'Release',
            \ 'exe': 'msbuild.exe',
            \ 'args': ['ALL_BUILD.vcxproj'],
            \ 'buffer_output': 0,
            \ }


" Multi-entry selection UI.
Plug 'junegunn/fzf'
" Plug 'junegunn/fzf.vim'
" let g:fzf_layout = { 'down': '~40%' }
" let g:fzf_colors =
" \ { "fg":      ["fg", "Normal"],
"   \ "bg":      ["bg", "Normal"],
"   \ "hl":      ["fg", "IncSearch"],
"   \ "fg+":     ["fg", "CursorLine", "CursorColumn", "Normal"],
"   \ "bg+":     ["bg", "CursorLine", "CursorColumn"],
"   \ "hl+":     ["fg", "IncSearch"],
"   \ "info":    ["fg", "IncSearch"],
"   \ "border":  ["fg", "Ignore"],
"   \ "prompt":  ["fg", "Comment"],
"   \ "pointer": ["fg", "IncSearch"],
"   \ "marker":  ["fg", "IncSearch"],
"   \ "spinner": ["fg", "IncSearch"],
"   \ "header":  ["fg", "WildMenu"] }
" if executable('ag')
"     let $FZF_DEFAULT_COMMAND='ag --path-to-ignore ~/.ignore --hidden -g ""'
" endif

" Plug 'wincent/command-t',
"             \ { 'do': 'cd ruby/command-t/ext/command-t && ruby extconf.rb && make' }
let g:CommandTMaxFiles=400000

" Plug 'vifm/vifm.vim'


"Plug 'ctrlpvim/ctrlp.vim'
" Setup some default ignores
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
\}
" r: Use the nearest .git directory as the cwd
" This makes a lot of sense if you are working on a project that is in version
" control. It also supports works with .svn, .hg, .bzr.
" w: - modifier to "r": start search from the cwd instead of the current
" file's directory
" let g:ctrlp_working_path_mode = 'r'
" let g:ctrlp_map='<leader>p'
if executable('ag')
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif
" Plug 'nixprime/cpsm'
" let g:ctrlp_match_func = {'match': 'cpsm#CtrlPMatch'}


Plug 'vim-ctrlspace/vim-ctrlspace'
if has('nvim')
  let g:CtrlSpaceDefaultMappingKey = '<C-space> '
endif
if executable("ag")
    let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
endif
let g:CtrlSpaceUseTabline = 1


Plug 'vim-scripts/headerguard'
function! g:HeaderguardName()
    return toupper(expand('%:gs/[^0-9a-zA-Z_]/_/g'))
endfunction

" supertab
Plug 'ervandew/supertab'
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SuperTabContextDefaultCompletionType = "<c-n>"


" Plug 'bfrg/vim-cpp-modern'
" Disable function highlighting (affects both C and C++ files)
" let g:cpp_no_function_highlight = 1
"
" Put all standard C and C++ keywords under Vim's highlight group `Statement`
" (affects both C and C++ files)
" let g:cpp_simple_highlight = 1

" Enable highlighting of named requirements (C++20 library concepts)
" let g:cpp_named_requirements_highlight = 1

" Plug 'sheerun/vim-polyglot', { 'commit': '31c55b8' }
" Plug 'octol/vim-cpp-enhanced-highlight'
" Plug 'vim-python/python-syntax'
Plug 'Vimjas/vim-python-pep8-indent'


Plug 'terryma/vim-multiple-cursors'

Plug 'editorconfig/editorconfig-vim'

" Plug 'vim-airline/vim-airline'
let g:airline_theme = 'monokai_tasty'
let g:airline_statusline_ontop = 0

" display tab bar
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#taboo#enabled = 0
" display minimal position info as line:column
let g:airline_section_z = '%l:%c%V'
" hide encoding/fileformat block if it matches utf-8/unix
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
" shorter mode name
let g:airline_mode_map = {
      \ '__'     : '-i',
      \ 'c'      : 'C',
      \ 'i'      : 'I',
      \ 'ic'     : 'I',
      \ 'ix'     : 'I',
      \ 'n'      : 'N',
      \ 'multi'  : 'M',
      \ 'ni'     : 'N',
      \ 'no'     : 'N',
      \ 'R'      : 'R',
      \ 'Rv'     : 'R',
      \ 's'      : 'S',
      \ 'S'      : 'S',
      \ ''     : 'S',
      \ 't'      : 'T',
      \ 'v'      : 'V',
      \ 'V'      : 'V',
      \ ''     : 'V',
      \ }
let g:airline#extensions#default#section_truncate_width = {
      \ 'b': 30,
      \ 'x': 20,
      \ 'y': 4,
      \ 'z': 4,
      \ 'warning': 80,
      \ 'error': 80,
      \ }


Plug 'samoshkin/vim-mergetool'
let g:mergetool_layout = 'mr'
let g:mergetool_prefer_revision = 'local'


" Plug 'andymass/vim-matchup'
" let g:matchup_matchparen_offscreen = {}
" let g:matchup_matchparen_deferred = 1
" let g:matchup_matchparen_deferred_show_delay = 10
" let g:matchup_matchparen_deferred_hide_delay = 50
" let g:matchup_matchparen_hi_surround_always = 1
" let g:matchup_matchparen_timeout = 300
" let g:matchup_matchparen_insert_timeout = 60


Plug 'bounceme/poppy.vim'
au! cursormoved * call PoppyInit()
let g:poppy_point_enable = 1

"""""""""""""""""""" LSP client plugins """"""""""""""""""""

" PREREQUISITES:
"
" install ccls:
" ============
"
"
" MacOS:
" -----
"
" $ brew tap twlz0ne/homebrew-ccls
" $ brew install ccls
"
" Rename binary to /usr/local/bin/ccls1 and create script /usr/local/bin/ccls:
"```
" #!/bin/sh
" exec ccls1 --log-file=/tmp/ccls.log -v=1 -init='{"clang":{"extraArgs":["-isystem", "/Library/Developer/CommandLineTools/usr/include/c++/v1"]}}' "$@"
"```
"
" Windows:
" -------
" git clone https://git.llvm.org/git/llvm.git
" git clone https://git.llvm.org/git/clang.git llvm/tools/clang

" cd llvm
" cmake -H. -BRelease -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DLLVM_TARGETS_TO_BUILD=X86
" ninja -C Release clangFormat clangFrontendTool clangIndex clangTooling clang

" for upstream:
"    git clone --depth=1 --recursive https://github.com/MaskRay/ccls
" for release:
"    1)download https://github.com/MaskRay/ccls/archive/0.20190314.zip
"    2)unpack to ccls
" cd ccls
" cmake -H. -BRelease -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_PREFIX_PATH="C:/llvm/Release;C:/llvm/Release/tools/clang;C:/llvm;C:/llvm/tools/clang"
" ninja -C Release
"
" Rename binary to ccls1.exe and create a batch file ccls.bat with contents:
" ccls1 --log-file=%TEMP%\ccls.log -v=2

" Linux:
" -----
"  Install 'ccls' package from AUR


if 0
    Plug 'Valloric/YouCompleteMe',
                \ { 'do': 'python install.py --clangd-completer' }
    let g:ycm_use_clangd = 1
    let g:ycm_clangd_binary_path = "clangd"
    let g:ycm_always_populate_location_list = 1
endif


if 0
    " Plug 'w0rp/ale', { 'commit': '80ef7ea2d0b22f0d8de7387a3d5bf6e9e5b72e9d' }
    Plug 'w0rp/ale'
    " problem reporting style:
    let g:ale_set_highlights = 1 " set problem highlights ?
    let g:ale_set_signs = 1 " set problem signs ?
    " let g:ale_sign_error = '>>'
    " let g:ale_sign_warning = '--'
    let g:ale_echo_cursor = 0 " echo messages based on cursor ?
    let g:ale_cursor_detail = 0 " display preview based on cursor ?
    let g:ale_set_balloons = 1  " show balloons by mouse cursor?
    let g:ale_virtualtext_cursor = 1 " show as inline text by cursor?
    let g:ale_set_loclist = 0 " report to loclist ?
    let g:ale_set_quickfix = 1 " report to quickfix ?
    let g:ale_open_list = 1 " open loclist/quickfix ?
    let g:ale_keep_list_window_open = 1 " keep open even after errors disappear ?

    let g:ale_linters = {
        \ 'c': ['clangd'],
        \ 'cpp': ['clangd'],
        \ 'python': ['pyls'],
        \ }

    let g:ale_fixers = {
        \ 'c': ['clang-format'],
        \ 'cpp': ['clang-format'],
        \ }
    if has('win32')
        let s:clangd_log = 'd:/clangd.log'
    else
        let s:clangd_log = '/tmp/clangd.log'
    endif
    " let g:ale_cpp_clangd_options = '-log=verbose -background-index 2>>'.s:clangd_log
    let g:ale_history_enabled = 1
    let g:ale_history_log_output = 1
    let g:ale_completion_enabled = 1

    " if has('nvim')
    "   Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    " else
    "   Plug 'Shougo/deoplete.nvim'
    "   Plug 'roxma/nvim-yarp'
    "   Plug 'roxma/vim-hug-neovim-rpc'
    " endif
    " let g:deoplete#enable_at_startup = 1

endif

if 0
    Plug 'prabirshrestha/async.vim'
    Plug 'prabirshrestha/vim-lsp'
    Plug 'prabirshrestha/asyncomplete.vim'
    Plug 'prabirshrestha/asyncomplete-lsp.vim'
    Plug 'prabirshrestha/asyncomplete-file.vim'
    let g:lsp_diagnostics_enabled = 1
    let g:lsp_signs_enabled = 1
    let g:lsp_diagnostics_echo_cursor = 1

    let g:lsp_highlights_enabled = 0
    let g:lsp_highlight_references_enabled = 0
    let g:lsp_textprop_enabled = 0
    let g:lsp_virtual_text_enabled = 0

    let g:lsp_log_verbose = 1
    let g:lsp_log_file = expand('~/vim-lsp.log')
    let g:asyncomplete_log_file = expand('~/asyncomplete.log')

    if executable('pyls')
        " pip install python-language-server
        au User lsp_setup call lsp#register_server({
            \ 'name': 'pyls',
            \ 'cmd': {server_info->['pyls']},
            \ 'whitelist': ['python'],
            \ })
    endif
    if executable('clangd')
        au User lsp_setup call lsp#register_server({
            \ 'name': 'clangd',
            \ 'cmd': {server_info->['clangd', '-background-index']},
            \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
            \ })
    endif
endif


if 1
    if has('win32')
        let LanguageClientInstallCmd = 'powershell -File install.ps1'
    else
        let LanguageClientInstallCmd = 'bash install.sh'
    endif

    Plug 'autozimu/LanguageClient-neovim', {
                \ 'branch': 'next',
                \ 'do': LanguageClientInstallCmd,
                \ }
    let g:LanguageClient_serverCommands = {
        \ 'c': ['clangd'],
        \ 'cpp': ['clangd'],
        \ 'python': ['pyls'],
        \ 'rust': ['rustup', 'run', 'stable', 'rls'],
        \ }
endif


Plug 'sakhnik/nvim-gdb', { 'do': ':!./install.sh \| UpdateRemotePlugins' }


""""""""""""""""" color schemes """"""""""""""""""

" Plug 'flazz/vim-colorschemes'
" Plug 'joshdick/onedark.vim', { 'as': 'colo-onedark' }
" Plug 'KeitaNakamura/neodark.vim', { 'as': 'colo-neodark' }
" Plug 'rakr/vim-one', { 'as': 'colo-one' }
" Plug 'nielsmadan/harlequin', { 'as': 'colo-harlequin' }
" Plug 'chriskempson/base16-vim', { 'as': 'colo-base16' }

Plug 'sickill/vim-monokai', { 'as': 'colo-monokai' }
Plug 'groovyo/vim-monokai-tasty', { 'as': 'colo-monokai-tasty' }
Plug 'erichain/vim-monokai-pro', { 'as': 'colo-monokai-pro' }
Plug 'erichdongubler/vim-sublime-monokai', { 'as': 'colo-monokai-sublime' }

Plug 'tomasr/molokai', { 'as': 'colo-molokai' }
Plug 'fmoralesc/molokayo', { 'as': 'colo-molokayo' }
Plug 'fcevado/molokai_dark', { 'as': 'colo-molokai_dark' }
Plug 'groovyo/molokai-zhou13', { 'as': 'colo-molokai-zhou13' }

Plug 'morhetz/gruvbox', { 'as': 'colo-gruvbox' }
" also see https://github.com/morhetz/gruvbox-contrib for terminal theme
Plug 'noahfrederick/vim-noctu', { 'as': 'colo-noctu' }

Plug 'noahfrederick/vim-hemisu', { 'as': 'colo-hemisu' }
Plug 'NLKNguyen/papercolor-theme', { 'as': 'colo-papercolor' }
Plug 'rakr/vim-two-firewatch', { 'as': 'colo-two-firewatch' }

" older version
" Plug 'endel/vim-github-colorscheme', { 'as': 'colo-github' }
" 2018 version
Plug 'cormacrelf/vim-colors-github', { 'as': 'colo-github' }

Plug 'severij/vadelma', { 'as': 'colo-vadelma' }
Plug 'sainnhe/edge', { 'as': 'colo-edge' }

call plug#end()

" call deoplete#custom#option('sources', {
"             \ '_': ['ale'],
"             \})

"NOTE: :PlugInstall to install plugins


" Neovim under Windows setup:
" 1) install python3 and ruby+devkit
" 2) add to PATH:
"    C:\Program_Files\Ruby24\msys64\usr\bin
"    C:\Program_Files\Ruby24\msys64\mingw64\bin
"    and make sure these are in PATH:
"    C:\Program_Files\Ruby24\bin
"    C:\Program Files\Python37
" 3) pip install neovim
" 4) gem install neovim

" Windows C/C++ development environment setup
" 1) install CMake, Visual Studio Tools and Windows 10 SDK
" 2) add to PATH:
"    C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\MSBuild\15.0\Bin
"    C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build


"------------------------------------------------------------------------------
" Editor Settings
"------------------------------------------------------------------------------
" for some reason Vim under Windows is not using UTF-8 by default
if has("win32")
    set encoding=utf-8              " UTF-8 everywhere
    set fileencoding=utf-8          " UTF-8 as default encoding for new files
end

set hidden                          " buffer becomes hidden when it is abandoned
"set nocompatible                    " use Vim's defaults instead of Vi's. Should be the
                                    " first set comand.
set fileformats=unix,dos            " use unix-style line endings by default
set fileformat=unix
set ts=4 sw=4 sts=-1 et             " 4 spaces to indent, expand tabs with spaces
"set noet ci pi sts=0 sw=4 ts=4      " indent=4 spaces, tabs to indent, spaces to align
set backspace=indent,eol,start      " allow backspacing over everything in insert mode
set history=50                      " keep 50 lines of command line history
set ruler                           " show the cursor position all the time
set list listchars=tab:▸\ ,trail:·  " display tabs and trailing whitespace
set wildmode=list:longest,full      " use the new menus
set wildmenu                        " command line completion uses enahnced mode
set wildignore=.git,build           " patterns excluded from wildcard expansion
set cinoptions=g0                   " do not indent public, private etc
set sessionoptions=globals,curdir,tabpages,resize,winpos,winsize
                                    " saves cwd, tabs and windows
set nowrap                          " do not wrap line if too long
set noequalalways                   " preserve all windows sizes after split
set clipboard=unnamedplus
"set scrolloff=999                   " keep cursor centered vertically
set mouse=a                         " enable mouse in all modes
" if !empty($TERM)
"     set mouse=
" endif
set number                          " show line numbers
set showmode                        " show INSERT and VISUAL mode indication in status line
set showcmd                         " display incomplete commands in the bottom bar
"set cursorline                      " highlight current line
set laststatus=2                    " always show status line
set showtabline=1                   " show tab line when more than one tab
"set highlight+=sn                   " highlight status line and line numbers
set modelines=0                     " prevents some security exploits with modelines
"set relativenumber                  " show line numbers as offsets from the current line
"set ttyfast                         " enable faster redraws
"set visualbell                      " blink on errors
set winminheight=0                   " inactive window can be reduced to just a status line

set ignorecase                      " ignore case when searching
set smartcase                       " case sensitive searching if some letters are UPPERCASE
set gdefault                        " apply substitution globally on lines by default
set incsearch                       " do incremental searching
"set showmatch                       " when a bracket is inserted highlight the matching one
set hlsearch                        " switch on highlighting the last used search pattern.

set completeopt=noinsert,menuone,noselect

if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
endif


"set statusline=                                     " clear
"set statusline+=%f\                                 " file name
"set statusline+=%h%m%r%w\ \                         " flags
"set statusline+=%4l%-5.(,%c%V%)\ \ %6P\ \ \         " offset
"set statusline+=%{&fileformat}/%{strlen(&ft)?&ft:'none'} " file format
"set statusline+=%=                                  " right align
"set statusline+=%{strlen(&fenc)?&fenc:&enc}\ \ \      " encoding
"set statusline+=%b,%B                               " current char
"set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\  " highlight



function! MyStatusLine()
    let statusline = ""
    " Filename (F -> full, f -> relative)
    let statusline .= "%f"
    " Buffer flags
    let statusline .= "%( %h%1*%m%*%r%w%) "
    " File format and type
    let statusline .= "(%{&ff}%(\/%Y%)) "
    " Left/right separator
    let statusline .= "%="
    " Line & column
    let statusline .= "%l,%c%V "
    " Character under cursor (decimal)
    let statusline .= "| %3.3b "
    " Character under cursor (hexadecimal)
    let statusline .= "%02.2B "
    " File progress
    let statusline .= "| %3P"
    return statusline
endfunction

set statusline=%!MyStatusLine()

filetype plugin indent on           " detect file type, do language dependent indenting
syntax on                           " switch syntax highlighting on



"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost
"$TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
" if (empty($TMUX))
"   if (has("nvim"))
"       let $NVIM_TUI_ENABLE_TRUE_COLOR=1
"   endif
"   if (has("termguicolors"))
"     set termguicolors
"   endif
" endif



function! SchemeBefore()
    " let g:neodark#background = '#202020'
    " let g:neodark#use_256color = 1
    " let g:neodark#solid_vertsplit = 1
    let g:molokai_original=0
    let g:rehash256=0
    let g:molokai_terminal=0
    let g:PaperColor_Theme_Options = {
      \   'theme': {
      \     'default': {
      \       'transparent_background': 1,
      \       'allow_bold' : 1,
      \       'allow_italic' : 0,
      \     },
      \     'default.light--' : {
      \       'override' : {
      \         'color00' : ['#ffffff', '255'],
      \       }
      \     }
      \   }
      \ }
    let g:two_firewatch_italics=0
    " 0 = more blocky diff markers in signcolumn (e.g. GitGutter)
    let g:github_colors_block_diffmark = 0
    " 1 = use a slightly darker background, like Github inline code blocks
    let g:github_colors_soft = 1
endfunction

function! SchemeAfter()
    " use normal colors for read-only files in NERDTree
    " hi link NERDTreeRO NERDTreeFile


    " Blue status line
    hi StatusLine   guifg=#FFFFF6   guibg=#007ACC   gui=bold
    hi StatusLineNC guifg=#222222   guibg=#BBBBBB   gui=bold


    " increase visibility of stray whitespace
    if &background == "dark"
        hi Whitespace guifg=#FFFFFF
    else
        hi Whitespace guifg=#000000
    endif
    " if &background == "light"
    "     " set white background by default
    "     hi Normal guibg=#FFFFFF ctermbg=255 guifg=#333333 ctermfg=0
    " endif

    " tweaks for molokai:
    if g:colors_name =~ "molokai"
        hi Normal       guifg=#FFFFF6   guibg=#1B1D1E
        hi CursorLine   guibg=#303030
        hi CursorLineNr guifg=#FD971F   guibg=#303030
        hi LineNr       guifg=#74746E   guibg=#232526
        hi MatchParen   guifg=#FD971F   guibg=bg        gui=bold,underline
        hi TabLine      guifg=#FD971F   guibg=bg        gui=bold
        hi TabLineSel   guibg=#FD971F   guifg=bg
        hi VertSplit    guifg=#43443E   guibg=bg
    endif

    " tweaks for neg
    if g:colors_name == "neg"
        " hi Normal       guifg=#f0f0f0 guibg=#151515
        " hi StatusLine   guifg=#404040 guibg=#ffffff
        " hi StatusLineNC guifg=#202020 guibg=#666666
        " hi MatchParen   guifg=#FD971F guibg=bg          gui=bold,underline
        " hi TabLineSel   guifg=#E6DB74 guibg=#333536
    endif

    " tweaks for ia-light
    if g:colors_name =~ "ia-light"
        hi Function       guifg=#2298a1
    endif

    " tweaks for gruvbox
    if g:colors_name =~ "gruvbox"
        let g:gruvbox_vert_split = 'bg1'
        let g:gruvbox_sign_column = 'bg0'
    endif

    " tweaks for monokai_pro
    if g:colors_name =~ "monokai_pro"
        hi Comment guifg=#858585 ctermfg=244
        hi CursorLine guibg=#333333 ctermbg=236
        hi LineNr guifg=#606060
        hi CursorLineNr guibg=#333333
        " hi StatusLine ctermbg=255 ctermfg=232 cterm=bold guifg=#000000 guibg=#cccccc guisp=NONE gui=bold
        " hi StatusLineNC ctermbg=244 ctermfg=235 cterm=NONE guifg=#222222 guibg=#666666 guisp=NONE gui=NONE
        hi ErrorMsg guibg=#e14a6f
        hi PreProc ctermfg=204 guifg=#fd6389
        hi Function ctermfg=155 guifg=#aadb7b
        hi Repeat ctermfg=204 guifg=#fd6389
        hi Statement gui=bold
        hi Conditional gui=bold
        hi Repeat gui=bold
        hi link rubyFunction              Function
        hi link javascriptFunction        Function
        hi link javascriptRailsFunction   Function
        hi link cssFunctionName           Function
        hi link cssFunctionName           Function

        " make NERDTree directory colors consistent with ranger
        hi link NERDTreeDir          Type
        hi link NERDTreeClosable     NERDTreeDir
        hi link NERDTreeOpenable     NERDTreeDir
        hi link NERDTreeDirSlash     Directory
        hi link NERDTreeLinkTarget   Directory
    endif

    " tweaks for papercolor
    if (g:colors_name =~ "papercolor") && (&background == "light")
        hi Comment          guifg=#979797 ctermfg=4
        hi CursorLine       guibg=#EEEEEE
        " hi Operator         gui=bold
    endif


    " LSP
    hi lspReference ctermfg=red guifg=red ctermbg=green guibg=green
    " ALE
    if &background == "dark"
        " hi ALEWarning guibg=DarkMagenta ctermbg=DarkMagenta
        hi ALEWarning guibg=NONE ctermbg=NONE  guisp=Magenta gui=undercurl
        hi ALEWarningSign guibg=DarkMagenta ctermbg=DarkMagenta
        hi ALEVirtualTextWarning guibg=DarkMagenta ctermbg=DarkMagenta
        hi ALEError guibg=NONE ctermbg=NONE guisp=Red gui=undercurl
        hi ALEErrorSign guibg=DarkRed ctermbg=DarkRed
        hi ALEVirtualTextError guibg=DarkRed ctermbg=DarkRed
    else
        hi ALEWarning guibg=NONE ctermbg=NONE  guisp=Magenta gui=undercurl
        hi ALEWarningSign guifg=Magenta ctermfg=Magenta
        hi ALEVirtualTextWarning guifg=Magenta ctermfg=Magenta
        hi ALEError guibg=NONE ctermbg=NONE guisp=Red gui=undercurl
        hi ALEErrorSign guifg=Red ctermfg=Red gui=bold
        hi ALEVirtualTextError guifg=Red ctermfg=Red gui=bold
    endif
endfunction

function! SchemeDark()
    set background=dark
    " colo molokai
    " colo molokayo
    " colo harlequin
    " colo monokai
    " colo monokai_pro
    " colo vim-monokai-tasty
    colo sublimemonokai
    " colo noctu
    " colo gruvbox
    " colo edge
endfunction
function! SchemeLight()
    set background=light
    " colo hemisu
    colo github
    " colo papercolor
    " colo two-firewatch
    " colo base16-ia-light
    " colo base16-summerfruit-light
endfunction
com! Light call SchemeLight()
com! Dark call SchemeDark()
augroup ColorSchemes
    au!
    au ColorSchemePre * call SchemeBefore()
    au ColorScheme * call SchemeAfter()
augroup END

if isdirectory(g:plug_home) " VimPlug has synced the plugins already?
    :Dark
endif


"------------------------------------------------------------------------------
" Commands
"------------------------------------------------------------------------------
" rebuild indentation in the whole file
com! FixIndentation normal mzgg=G`z

" strip trailing whitespace globally
function! ShowSpaces(...)
  let @/='\v(\s+$)|( +\ze\t)'
  let oldhlsearch=&hlsearch
  if !a:0
    let &hlsearch=!&hlsearch
  else
    let &hlsearch=a:1
  end
  return oldhlsearch
endfunction

function! TrimSpaces() range
  let oldhlsearch=ShowSpaces(1)
  execute a:firstline.",".a:lastline."substitute ///gec"
  let &hlsearch=oldhlsearch
endfunction

com! -bar -nargs=? ShowSpaces call ShowSpaces(<args>)
com! -bar -nargs=0 -range=% TrimSpaces <line1>,<line2>call TrimSpaces()


" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
com! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis


function! AddLicenseBlockHB()
  execute ':0r ' . g:vimrc_dir . '/hblicenseblock.txt'
  execute ':%s/$f/' . expand('%:t') . '/g'
endfunction
com! AddLicenseBlockHB call AddLicenseBlockHB()
com! AddHeaderGuard :HeaderguardAdd

" `What` will print out the syntax group that the cursor is currently above.
" from https://www.reddit.com/r/vim/comments/6z4aau/how_to_stop_vim_from_autohighlighting_italics_in/
command! What echo synIDattr(synID(line('.'), col('.'), 1), 'name')
"------------------------------------------------------------------------------
" Autocommands
"------------------------------------------------------------------------------

" ALE omnifunc
augroup ALEOmniFunc
    au!
    au BufReadPost *.cpp set omnifunc=ale#completion#OmniFunc
augroup END


" cursorline is visible only in active window
augroup CursorLineOnlyInActiveWindow
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END


" utilize syntax completion if it is available and omnifunc is unset
" if has("autocmd") && exists("+omnifunc")
"   autocmd Filetype *
"           \ if &omnifunc == "" |
"           \     setlocal omnifunc=syntaxcomplete#Complete |
"           \ endif
" endif


" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
au BufReadPost *
\ if line("'\"") > 1 && line("'\"") <= line("$") |
\   exe "normal! g`\"" |
\ endif


" Autosave all open buffers upon losing focus
" Used silent modifier to prevent error messages with new buffers
"au FocusLost * :silent! wa


" Show vertical bar to know when the line of code is too long
" Only do that for the files with source code.
"au FileType c,cpp,python,bash set colorcolumn=85


"fswitch
au! BufEnter *.cpp let b:fswitchdst = 'hpp' | let b:fswitchlocs = './,..,../include/'
au! BufEnter *.hpp let b:fswitchdst = 'cpp' | let b:fswitchlocs = './,private/,../src/'

au! BufRead * if search('-*- C++ -*-', 'nw', 5) || search('#pragma', 'nw', 5) | setlocal ft=cpp | endif

"------------------------------------------------------------------------------
" Keybindings
"------------------------------------------------------------------------------

" set leader key
let mapleader = ","


" use hjkl instead of arrow keys
nnoremap <Up>     <Nop>
nnoremap <Down>   <Nop>
nnoremap <Left>   <Nop>
nnoremap <Right>  <Nop>
inoremap <Up>     <Nop>
inoremap <Down>   <Nop>
inoremap <Left>   <Nop>
inoremap <Right>  <Nop>

" makes j and k work the way you expect instead of working in some archaic
" “movement by file line instead of screen line" fashion
nnoremap j gj
nnoremap k gk

" jk or kj switches to normal mode.
" Also has a nice side effect of leaving you where you were
" if you were already in normal mode
"inoremap jk <esc>
"inoremap kj <esc>


" exit INSERT mode and adjust cursor
inoremap ii <Esc>l

" H jumps to the beginning and L jumps to the end of the line
nnoremap H 00
nnoremap L $


" Use space and backspace to scroll the document
nnoremap <Space> <C-d>
nnoremap <BS>    <C-u>


" Enter command mode with ; (saves pressing shift)
nnoremap ; :

" Select all
nnoremap <C-a> ggVG

" switch to buffer by typing bg and then buffer index followed by CR
"nnoremap bg :ls<CR>:b<Space>

" use Perl/Python regexes instead of Vim
nnoremap / /\v
vnoremap / /\v

" match bracket pair
nnoremap <tab> %
vnoremap <tab> %

" do not clobber yanked text when pasting over existing text in visual mode
vnoremap p "_dP

" quicker saving
nnoremap <leader>, :wa<cr>
inoremap <leader>, <esc>:wa<cr>a

"window op chord
"nnoremap <leader>w <C-w>

" clear highlighted stuff
nnoremap <leader><space> :noh<cr>

" reselect the text that was just pasted
nnoremap <leader>v V`]

" go to previous location/next location (jump history)
" note: M=meta(alt), D=command
nnoremap <M-[> <C-o>
nnoremap <M-]> <C-i>
nnoremap <D-[> <C-o>
nnoremap <D-]> <C-i>

" tabs switching
nnoremap <M-9> :tabprev<CR>
nnoremap <M-0> :tabnext<CR>
nnoremap <D-9> :tabprev<CR>
nnoremap <D-0> :tabnext<CR>

" NERD Tree
nnoremap <leader>f :NERDTreeToggle<cr>
" Highlight currently open buffer in NERDTree
nnoremap <leader>n :NERDTreeFind<CR>

" open vimrc in the vertical split
" note: can't use $MYVIMRC because for neovim it's init.vim and not this file
nnoremap <leader>ev <C-w><C-v><C-l>:e <C-r>=g:myvimrc<cr><cr>

" YankRing
"nnoremap <silent> <F11> :YRShow<cr>

" open/save session
" nnoremap <leader>o :silent OpenSession<space>
" nnoremap <leader>s :silent SaveSession<space>


" code navigation and refactoring
" nnoremap <silent> <C-k> <Plug>(ale_previous_wrap)
" nnoremap <silent> <C-j> <Plug>(ale_next_wrap)

" nnoremap <leader>gg :ALEGoToDefinition<cr>
" nnoremap <leader>gr :ALEFindReferences<cr>
" nnoremap <leader>gi :ALEHover<cr>
" nnoremap <leader>gs :ALESymbolSearch<cr>
" nnoremap <leader>gf :ALEFix<cr>

nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> <leader>gg :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <leader>gi :call LanguageClient#textDocument_implementation()<CR>
nnoremap <silent> <leader>gr :call LanguageClient#textDocument_references()<CR>
nnoremap <F5> :call LanguageClient_contextMenu()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>


" fswitch
" switch hpp/cpp and load into the current window
nnoremap <leader>oo :FSHere<CR>

" command-t
" nmap <silent> <leader>m <Plug>(CommandT)
" nmap <silent> <leader>. <Plug>(CommandTBuffer)
" nmap <silent> <leader>j <Plug>(CommandTJump)

"file list
nnoremap <silent><leader>m :CtrlSpace o<CR>
"buffer list
nnoremap <silent><leader>. :CtrlSpace<CR>
"load workspace
nnoremap <silent><leader>o :CtrlSpace w<CR>
"save workspace
nnoremap <silent><leader>s :CtrlSpace ws<CR>



" copy current file name to clipboard
nnoremap <leader>ys :let @*=substitute(expand("%"), "\\", "/", "g")<CR>
nnoremap <leader>yl :let @*=substitute(expand("%:p"), "\\", "/", "g")<CR>

" NERDCommenter
let g:doxygen_comment_mode = 0
function! NERDCommenterSwitchDoxygenMode()
    if g:doxygen_comment_mode == 0
        let g:NERDCustomDelimiters = { 'cpp': { 'left': '///', 'leftAlt': '/**','rightAlt': '*/' } }
        let g:doxygen_comment_mode = 1
        echo 'now using Doxygen-style comments'
    else
        unlet g:NERDCustomDelimiters
        let g:doxygen_comment_mode = 0
        echo 'disabled Doxygen-style comments'
    endif
endfunction
nnoremap <leader>cd :call NERDCommenterSwitchDoxygenMode()<cr>

" Neomake
nnoremap <leader>b :Neomake!<space>

" F10 shows highlight group of item under cursor
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
